"==========================================
" Initial Plugin 加载插件
"==========================================
"set rtp+=~/tools/vim/share/vim/vim80

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" ensure ftdetect et al work by including this after the bundle stuff
filetype plugin indent on
"================BasicSetting==============
"unmap <C-V>
set nu!
set guifont=Consolas:h11
set lines=50 columns=200
set ts=4
set mouse=a

colorscheme molokai
set background=dark
set t_Co=256
syntax enable
syntax on
" change the terminal's title
set title
" 关闭交换文件 set noswapfile
set wildignore=*.swp,*.bak,*.pyc,*.class,.svn,*.o,*~,*.pyc,*.class
" 允许插件
filetype plugin on
" 启动自动补全
filetype plugin indent on
"当打开vim且没有文件时自动打开NERDTr
autocmd vimenter * if !argc() | NERDTree | endif
"" 只剩 NERDTree时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

set nobackup        "不生成备份文件
set showmatch        "设置匹配模式
set smartindent        "设置只能对齐
set ai!            "设置自动缩进

"Regular Backspace
set nocompatible
set backspace=indent,eol,start
" For regular expressions turn magic on
set magic
" 突出显示当前列
set cursorcolumn
" 突出显示当前行
set cursorline
"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================
" 显示当前的行号列号
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
set showmode
" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7
" set winwidth=79

" 命令行（在状态行下）的高度，默认为1，这里是2
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line - use 2 lines for the status bar
set laststatus=2
" 显示行号
set number
" 取消换行
set nowrap

" How many tenths of a second to blink when matching brackets
set matchtime=2
" 自动补全配置
" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu
" 设置文内智能搜索提示
" 高亮search命中的文本
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase
" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
let g:FoldMethod = 0
" 缩进配置

" 打开自动缩进
" never add copyindent, case error   " copy the previous indentation on autoindenting
set autoindent
" tab相关变更
" 设置Tab键的宽度        [等同的空格个数]
set tabstop=4
" 每一次缩进对应的空格数
set shiftwidth=4
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
" 将Tab自动转化成空格[需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set expandtab
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast
" 00x增减数字时使用十进制
set nrformats=
" 相对行号: 行号变成相对，可以用 nj/nk 进行跳转
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
nnoremap <leader>n :call NumberToggle()<cr>
" 防止tmux下vim的背景色显示异常
" Refer: http://sunaku.github.io/vim-256color-bce.html
if &term =~ '256color'
  set t_ut=
endif
" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
"set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
"set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim
set termencoding=utf-8
" Use Unix as the standard file type
set ffs=unix,dos,mac
" 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=m
" 合并两行中文时，不在中间加空格
set formatoptions+=B
"==========================================
" Others Settings
"==========================================
" vimrc文件修改之后自动加载, windows
autocmd! bufwritepost _vimrc source %
" vimrc文件修改之后自动加载, linux
autocmd! bufwritepost .vimrc source %
" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange
" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
hi Normal  ctermfg=252 ctermbg=none

"==========================================
" HotKey Settings  自定义快捷键设置
"==========================================
"取消高亮
map M :noh<CR>
" 修改leader键
let mapleader = ','
let g:mapleader = ','
" 主要按键重定义
"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
" F1 - F6 设置
""换行
nnoremap <F1> :set wrap! wrap?<CR>
" F2 行号开关，用于鼠标复制代码用
" 为方便复制，用<F2>开启/关闭行号显示:
function! HideNumber()
  if(&relativenumber == &number)
    set relativenumber! number!
  elseif(&number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap <F2> :call HideNumber()<CR>
"  F3  NERD_tree
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>
"tagbar
nmap <F4> :TagbarToggle<CR>
"F5  tab 转空格
function! ChangeTab()
    set ts=4
    set expandtab
    %retab!
endfunc
nnoremap <F5> :call ChangeTab()<CR>
" F6 语法开关，关闭语法可以加快大文件的展示
noremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>
map <F7> :IndentlinesToggle<CR>
imap <F7> <ESC>  :IndentlinesToggle<CR>
" LeaderfFile
noremap <C-f> :LeaderFile<CR>
" 分屏窗口移动, Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
"buffer 快捷切换
map <C-n> :bn<CR>
map <C-p> :bp<CR>
" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
" Go to home and end using capitalized directions
noremap H ^
noremap L $
" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :
"map <space> /
" 进入搜索Use sane regexes"
nnoremap / /\v
" Keep search pattern at the center of the screen.
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
" switch # *
nnoremap # *
nnoremap * #
" for # indent, python文件中输入新行时#号注释不切回行首
autocmd BufNewFile,BufRead *.py inoremap # X<c-h>#
" => 选中及操作改键
" 调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv
" y$ -> Y Make Y behave like other capitals
map Y y$
" 复制选中区到系统剪切板中
vnoremap <leader>y "+y
" select all
map <Leader>sa ggVG
" select block
nnoremap <leader>v V`}
" kj 替换 Esc
inoremap kj <Esc>
inoremap jk <Esc>
" 滚动Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    call setline(1, "\# -*- coding: utf-8 -*-")
    normal G
    normal o
    normal o
endfunc
"重设代码折叠
nnoremap zn za<CR>
nnoremap zm zM<CR>
nnoremap zo zO<CR>
"优化快捷键
autocmd FileType c,cpp    set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType c,cpp    nmap <leader>[ a{}<ESC>i<CR><CR><Up><tab>
autocmd FileType c,cpp    imap <leader>[ {}<ESC>i<CR><CR><Up><tab>
autocmd FileType c,cpp    imap <leader><leader> <<
autocmd FileType c,cpp    imap <leader>.  >>
autocmd FileType python   imap <leader>p  print<Space>()<ESC>i
" Quickly close the current window
nnoremap <leader>I :PluginInstall<CR>
nnoremap <leader>C :PluginClean<CR>
" Quickly close the current window  unsave
nnoremap <leader>q :qa!<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>W :wq<CR>
nnoremap <leader>m :mark
nnoremap <leader>s :source  $HOME/.vimrc<CR>
nnoremap <leader>f :set guifont=Consolas:h11
nnoremap <leader>F :LeaderfFile<CR>
nnoremap <leader>r :start,ends/str1/str2/g
nnoremap <leader>R :m,ns/old/new/g
nnoremap <leader>c :let g:ycm_show_diagnostics_ui = 0<CR>
"nnoremap <leader>C :let g:ycm_show_diagnostics_ui = 1<CR>
function! Sethead()
    call setline(1, "#include<iostream>")
    call setline(2, "#include<string>")
    call setline(3, "#include<vector>")
    call setline(4, "")
    call setline(5, "using namespace std;")
    call setline(6, "")
    call setline(7, "int main(){")
    call setline(8, "   return 0;")
    call setline(9, "}")
    normal G
    normal k
    normal k
endfunc
nnoremap <leader>H :call Sethead()<CR>
" Quickly save the current file
" 交换 ' `, 使得可以快速使用'跳到marked位置
nnoremap ' `
nnoremap ` '
" remap U to <C-r> for easier redo
nnoremap U <C-r>
"Highlight
nmap m  gd
" 去掉搜索高k
noremap <silent>M :nohls<CR>\
"去除行尾空格
map <leader><space> :FixWhitespace<cr>

nnoremap 1<space> 1gt
nnoremap 2<space> 2gt
nnoremap 3<space> 3gt
nnoremap 4<space> 4gt
nnoremap 5<space> 5gt
nnoremap 6<space> 6gt
nnoremap 7<space> 7gt
nnoremap 8<space> 8gt
nnoremap 9<space> 9gt

